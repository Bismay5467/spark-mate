[{"C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\index.js":"1","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\App.js":"2","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\pages\\OnBoarding.js":"3","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\pages\\Home.js":"4","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\pages\\Dashboard.js":"5","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\Nav.js":"6","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\ChatContainer.js":"7","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\AuthModal.js":"8","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\ChatHeader.js":"9","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\MatchesDisplay.js":"10","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\ChatDisplay.js":"11","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\Chat.js":"12","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\ChatInput.js":"13","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\ImageUpload.js":"14"},{"size":223,"mtime":1699191575293,"results":"15","hashOfConfig":"16"},{"size":750,"mtime":1699191622311,"results":"17","hashOfConfig":"16"},{"size":9261,"mtime":1699191637646,"results":"18","hashOfConfig":"16"},{"size":1466,"mtime":1699191657776,"results":"19","hashOfConfig":"16"},{"size":10558,"mtime":1699285726628,"results":"20","hashOfConfig":"16"},{"size":808,"mtime":1699191779200,"results":"21","hashOfConfig":"16"},{"size":827,"mtime":1699191836913,"results":"22","hashOfConfig":"16"},{"size":3768,"mtime":1699278473146,"results":"23","hashOfConfig":"16"},{"size":764,"mtime":1699191820384,"results":"24","hashOfConfig":"16"},{"size":1461,"mtime":1699191789551,"results":"25","hashOfConfig":"16"},{"size":2373,"mtime":1699191829374,"results":"26","hashOfConfig":"16"},{"size":722,"mtime":1699191843592,"results":"27","hashOfConfig":"16"},{"size":1068,"mtime":1699191813573,"results":"28","hashOfConfig":"16"},{"size":819,"mtime":1699191806496,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"v78ucg",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"33"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"33"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"33"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"33"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"33"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\index.js",[],[],["81"],"C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\App.js",["82","83"],[],"import Home from './pages/Home'\r\nimport Dashboard from './pages/Dashboard'\r\nimport OnBoarding from './pages/OnBoarding'\r\nimport {BrowserRouter, Route, Routes} from 'react-router-dom'\r\nimport {useCookies} from 'react-cookie'\r\nimport React from 'react'\r\n\r\nconst App = () => {\r\n    const [cookies, setCookie, removeCookie] = useCookies(['user'])\r\n\r\n    const authToken = cookies.AuthToken\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <Routes>\r\n                <Route path=\"/\" element={<Home/>}/>\r\n                {authToken && <Route path=\"/dashboard\" element={<Dashboard/>}/>}\r\n                {authToken && <Route path=\"/onboarding\" element={<OnBoarding/>}/>}\r\n\r\n            </Routes>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\pages\\OnBoarding.js",["84","85","86"],[],"import Nav from '../components/Nav'\r\nimport {useState} from 'react'\r\nimport {useCookies} from 'react-cookie'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport ImageUpload from '../components/ImageUpload'\r\n\r\nconst OnBoarding = () => {\r\n    const [cookies, setCookie, removeCookie] = useCookies(null)\r\n    const [formData, setFormData] = useState({\r\n        user_id: cookies.UserId,\r\n        first_name: \"\",\r\n       dob: \"\",\r\n        show_gender: false,\r\n        gender_identity: \"man\",\r\n        gender_interest: \"woman\",\r\n        url: \"\",\r\n        about: \"\",\r\n        matches: []\r\n\r\n    })\r\n\r\n    let navigate = useNavigate()\r\n\r\n    const handleSubmit = async (e) => {\r\n        console.log('submitted')\r\n        e.preventDefault()\r\n        try {\r\n            const response = await axios.put('http://localhost:8000/user', {formData})\r\n            console.log(response)\r\n            const success = response.status === 200\r\n            if (success) navigate('/dashboard')\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        console.log('e', e)\r\n        const value = e.target.type === \"checkbox\" ? e.target.checked : e.target.value\r\n        const name = e.target.name\r\n\r\n        setFormData((prevState) => ({\r\n            ...prevState,\r\n            [name]: value\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Nav\r\n                minimal={true}\r\n                setShowModal={() => {\r\n                }}\r\n                showModal={false}\r\n            />\r\n\r\n            <div className=\"onboarding\">\r\n                <h2>CREATE ACCOUNT</h2>\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                    <section>\r\n                        <label htmlFor=\"first_name\">Full Name</label>\r\n                        <input\r\n                            id=\"first_name\"\r\n                            type='text'\r\n                            name=\"first_name\"\r\n                            placeholder=\"Full Name\"\r\n                            required={true}\r\n                            value={formData.first_name}\r\n                            onChange={handleChange}\r\n                        />\r\n\r\n                        <label>Date of Birth</label>\r\n                        <div className=\"multiple-input-container\">\r\n                            <input\r\n                                id='dob'\r\n                                type='date'\r\n                                name='dob'\r\n                                required={true}\r\n                                value={formData.dob}\r\n                                onChange={handleChange} \r\n                            />\r\n                            \r\n                            \r\n                            {/* <input\r\n                                id=\"dob_day\"\r\n                                type=\"number\"\r\n                                name=\"dob_day\"\r\n                                placeholder=\"DD\"\r\n                                required={true}\r\n                                value={formData.dob_day}\r\n                                onChange={handleChange}\r\n                            />\r\n\r\n                            <input\r\n                                id=\"dob_month\"\r\n                                type=\"number\"\r\n                                name=\"dob_month\"\r\n                                placeholder=\"MM\"\r\n                                required={true}\r\n                                value={formData.dob_month}\r\n                                onChange={handleChange}\r\n                            />\r\n\r\n                            <input\r\n                                id=\"dob_year\"\r\n                                type=\"number\"\r\n                                name=\"dob_year\"\r\n                                placeholder=\"YYYY\"\r\n                                required={true}\r\n                                value={formData.dob_year}\r\n                                onChange={handleChange}\r\n                            /> */}\r\n                        </div>\r\n\r\n                        <label>Gender</label>\r\n                        <div className=\"multiple-input-container\">\r\n                            <input\r\n                                id=\"man-gender-identity\"\r\n                                type=\"radio\"\r\n                                name=\"gender_identity\"\r\n                                value=\"man\"\r\n                                onChange={handleChange}\r\n                                checked={formData.gender_identity === \"man\"}\r\n                            />\r\n                            <label htmlFor=\"man-gender-identity\">Man</label>\r\n                            <input\r\n                                id=\"woman-gender-identity\"\r\n                                type=\"radio\"\r\n                                name=\"gender_identity\"\r\n                                value=\"woman\"\r\n                                onChange={handleChange}\r\n                                checked={formData.gender_identity === \"woman\"}\r\n                            />\r\n                            <label htmlFor=\"woman-gender-identity\">Woman</label>\r\n                            <input\r\n                                id=\"more-gender-identity\"\r\n                                type=\"radio\"\r\n                                name=\"gender_identity\"\r\n                                value=\"more\"\r\n                                onChange={handleChange}\r\n                                checked={formData.gender_identity === \"more\"}\r\n                            />\r\n                            <label htmlFor=\"more-gender-identity\">More</label>\r\n                        </div>\r\n\r\n                        {/* <label htmlFor=\"show-gender\">Show Gender on my Profile</label>\r\n\r\n                        <input\r\n                            id=\"show-gender\"\r\n                            type=\"checkbox\"\r\n                            name=\"show_gender\"\r\n                            onChange={handleChange}\r\n                            checked={formData.show_gender}\r\n                        /> */}\r\n\r\n                        <label>Interested in</label>\r\n\r\n                        <div className=\"multiple-input-container\">\r\n                            <input\r\n                                id=\"man-gender-interest\"\r\n                                type=\"radio\"\r\n                                name=\"gender_interest\"\r\n                                value=\"man\"\r\n                                onChange={handleChange}\r\n                                checked={formData.gender_interest === \"man\"}\r\n                            />\r\n                            <label htmlFor=\"man-gender-interest\">Man</label>\r\n                            <input\r\n                                id=\"woman-gender-interest\"\r\n                                type=\"radio\"\r\n                                name=\"gender_interest\"\r\n                                value=\"woman\"\r\n                                onChange={handleChange}\r\n                                checked={formData.gender_interest === \"woman\"}\r\n                            />\r\n                            <label htmlFor=\"woman-gender-interest\">Woman</label>\r\n                            <input\r\n                                id=\"everyone-gender-interest\"\r\n                                type=\"radio\"\r\n                                name=\"gender_interest\"\r\n                                value=\"everyone\"\r\n                                onChange={handleChange}\r\n                                checked={formData.gender_interest === \"everyone\"}\r\n                            />\r\n                            <label htmlFor=\"everyone-gender-interest\">Everyone</label>\r\n\r\n                        </div>\r\n\r\n                        <label htmlFor=\"about\">About me</label>\r\n                        <input\r\n                            id=\"about\"\r\n                            type=\"text\"\r\n                            name=\"about\"\r\n                            required={true}\r\n                            placeholder=\"I like to listen music...\"\r\n                            value={formData.about}\r\n                            onChange={handleChange}\r\n                        />\r\n\r\n                        <input type=\"submit\" className='submit'/>\r\n                    </section>\r\n\r\n                    <section>\r\n\r\n                        <label htmlFor=\"url\">Profile Photo</label>\r\n                        <input\r\n                            type=\"file\" \r\n                            name=\"image\"\r\n                            accept=\"image/*\"\r\n                            id=\"image\"\r\n                            // type=\"url\"\r\n                            // name=\"url\"\r\n                            // id=\"url\"\r\n                            onChange={handleChange}\r\n                            required={true}\r\n                        />\r\n                        <div className=\"photo-container\">\r\n                            {formData.url && <img src={formData.url} alt=\"profile pic preview\"/>}\r\n                        </div>\r\n\r\n                        {/* <ImageUpload /> */}\r\n\r\n                    </section>\r\n\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default OnBoarding","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\pages\\Home.js",["87"],[],"import Nav from '../components/Nav'\r\nimport AuthModal from \"../components/AuthModal\"\r\nimport {useState} from 'react'\r\nimport {useCookies} from \"react-cookie\"\r\n\r\nconst Home = () => {\r\n    const [showModal, setShowModal] = useState(false)\r\n    const [isSignUp, setIsSignUp] = useState(true)\r\n    const [cookies, setCookie, removeCookie] = useCookies(['user'])\r\n    const authToken = cookies.AuthToken\r\n\r\n    const handleClick = () => {\r\n        if (authToken) {\r\n            removeCookie('UserId', cookies.UserId)\r\n            removeCookie('AuthToken', cookies.AuthToken)\r\n            window.location.reload()\r\n            return\r\n        }\r\n        setShowModal(true)\r\n        setIsSignUp(true)\r\n    }\r\n\r\n    return (\r\n        <div className=\"overlay\">\r\n            <Nav\r\n                authToken={authToken}\r\n                minimal={false}\r\n                setShowModal={setShowModal}\r\n                showModal={showModal}\r\n                setIsSignUp={setIsSignUp}\r\n            />\r\n            <div className=\"home\">\r\n                <h1 className=\"primary-title\">Love at First Swipe®</h1>\r\n                <button className=\"primary-button\" onClick={handleClick}>\r\n                    {authToken ? 'Signout' : 'Create Account'}\r\n                </button>\r\n\r\n\r\n                {showModal && (\r\n                    <AuthModal setShowModal={setShowModal} isSignUp={isSignUp}/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Home","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\pages\\Dashboard.js",["88","89","90","91","92","93"],[],"C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\Nav.js",["94","95"],[],"import whiteLogo from \"../images/sparkmate-logo.png\";\r\nimport colorLogo from \"../images/sparkmate-logo.png\";\r\n\r\n\r\nconst Nav = ({ authToken, minimal, setShowModal, showModal, setIsSignUp }) => {\r\n  const handleClick = () => {\r\n    setShowModal(true);\r\n    setIsSignUp(false);\r\n  };\r\n\r\n  return (\r\n    <nav>\r\n      <div className=\"logo-container\">\r\n        {/* <img\r\n          className=\"logo\"\r\n          src={minimal ? colorLogo : whiteLogo}\r\n          alt=\"logo\"\r\n        /> */\r\n        <h3 className=\"logo\">&#9829; Sparkmate</h3>\r\n        }\r\n      </div>\r\n      {!authToken && !minimal && (\r\n        <button\r\n          className=\"nav-button\"\r\n          onClick={handleClick}\r\n          disabled={showModal}\r\n        >\r\n          Log in\r\n        </button>\r\n      )}\r\n    </nav>\r\n  );\r\n};\r\nexport default Nav;","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\ChatContainer.js",[],[],"C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\AuthModal.js",["96","97","98","99"],[],"import { useState } from 'react'\r\nimport axios from 'axios'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useCookies } from 'react-cookie'\r\nimport playstoreicon from '../images/playstore-icon.png';\r\nimport appleicon from '../images/apple-icon.png'\r\n\r\n\r\nconst AuthModal = ({ setShowModal,  isSignUp }) => {\r\n    const [email, setEmail] = useState(null)\r\n    const [password, setPassword] = useState(null)\r\n    const [confirmPassword, setConfirmPassword] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [ cookies, setCookie, removeCookie] = useCookies(null)\r\n\r\n    let navigate = useNavigate()\r\n\r\n    const handleClick = () => {\r\n        setShowModal(false)\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n\r\n        try {\r\n            if(email.s)\r\n            if (isSignUp && (password !== confirmPassword)) {\r\n                setError('Passwords need to match!')\r\n                return\r\n            }\r\n            // if (isSignUp && password.length < 8) {\r\n            //     setError(\"Invalid password. Password must contain at least 8 characters, including one letter, one number, and one special character.\");\r\n            //     return;\r\n            //   }\r\n          \r\n            //   if (!/[a-zA-Z]/.test(password) || !/\\d/.test(password) || !/[!@#$%^&*()_+]/.test(password)) {\r\n            //     setError(\"Invalid password. Password must contain at least 8 characters, including one letter, one number, and one special character.\");\r\n            //     return;\r\n            //   }\r\n\r\n\r\n            const response = await axios.post(`http://localhost:8000/${isSignUp ? 'signup' : 'login'}`, { email, password })\r\n\r\n            \r\n          \r\n\r\n            setCookie('AuthToken', response.data.token)\r\n            setCookie('UserId', response.data.userId)\r\n\r\n            const success = response.status === 201\r\n            if (success && isSignUp) navigate ('/onboarding')\r\n            if (success && !isSignUp) navigate ('/dashboard')\r\n\r\n            window.location.reload()\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"auth-modal\">\r\n            <div className=\"close-icon\" onClick={handleClick}>ⓧ</div>\r\n\r\n            <h2>{isSignUp ? 'CREATE ACCOUNT': 'LOG IN'}</h2>\r\n            <p>By clicking Log In, you agree to our terms and conditions.</p>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"email\"\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"email\"\r\n                    required={true}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"password\"\r\n                    required={true}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                {isSignUp && <input\r\n                    type=\"password\"\r\n                    id=\"password-check\"\r\n                    name=\"password-check\"\r\n                    placeholder=\"confirm password\"\r\n                    required={true}\r\n                    onChange={(e) => setConfirmPassword(e.target.value)}\r\n                />}\r\n                <input className=\"secondary-button\" type=\"submit\"/>\r\n                <p>{error}</p>\r\n            </form>\r\n\r\n            <hr/>\r\n            <div className='icon-container'>\r\n                <img src={playstoreicon} className='icons'></img>\r\n                <img src={appleicon} className='icons'></img>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default AuthModal","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\ChatHeader.js",["100"],[],"import { useCookies } from 'react-cookie'\r\n\r\nconst ChatHeader = ({ user }) => {\r\n    const [ cookies, setCookie, removeCookie ] = useCookies(['user'])\r\n\r\n    const logout = () => {\r\n        removeCookie('UserId', cookies.UserId)\r\n        removeCookie('AuthToken', cookies.AuthToken)\r\n        window.location.reload()\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat-container-header\">\r\n            <div className=\"profile\">\r\n                <div className=\"img-container\">\r\n                    <img src={user.url} alt={\"photo of \" + user.first_name}/>\r\n                </div>\r\n                <h3>{user.first_name}</h3>\r\n            </div>\r\n            <i className=\"log-out-icon\" onClick={logout}>⇦</i>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\MatchesDisplay.js",["101","102","103","104"],[],"import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\nconst MatchesDisplay = ({ matches, setClickedUser }) => {\r\n  const [matchedProfiles, setMatchedProfiles] = useState(null);\r\n  const [cookies, setCookie, removeCookie] = useCookies(null);\r\n\r\n  const matchedUserIds = matches?.map(({ user_id }) => user_id);\r\n  const userId = cookies.UserId;\r\n\r\n  const getMatches = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:8000/users\", {\r\n        params: { userIds: JSON.stringify(matchedUserIds) },\r\n      });\r\n      setMatchedProfiles(response.data);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMatches();\r\n  }, [matches]);\r\n\r\n  const filteredMatchedProfiles = matchedProfiles?.filter(\r\n    (matchedProfile) =>\r\n      matchedProfile.matches.filter((profile) => profile.user_id == userId)\r\n        .length > 0\r\n  );\r\n\r\n  return (\r\n    <div className=\"matches-display\">\r\n      {filteredMatchedProfiles?.map((match, _index) => (\r\n        <div\r\n          key={_index}\r\n          className=\"match-card\"\r\n          onClick={() => setClickedUser(match)}\r\n        >\r\n          <div className=\"img-container\">\r\n            <img src={match?.url} alt={match?.first_name + \" profile\"} />\r\n          </div>\r\n          <h3>{match?.first_name}</h3>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MatchesDisplay;","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\ChatDisplay.js",["105"],[],"import Chat from './Chat'\r\nimport ChatInput from './ChatInput'\r\nimport axios from 'axios'\r\nimport {useState, useEffect} from \"react\"\r\n\r\n\r\nconst ChatDisplay = ({ user , clickedUser }) => {\r\n    const userId = user?.user_id\r\n    const clickedUserId = clickedUser?.user_id\r\n    const [usersMessages, setUsersMessages] = useState(null)\r\n    const [clickedUsersMessages, setClickedUsersMessages] = useState(null)\r\n\r\n    const getUsersMessages = async () => {\r\n     try {\r\n            const response = await axios.get('http://localhost:8000/messages', {\r\n                params: { userId: userId, correspondingUserId: clickedUserId}\r\n            })\r\n         setUsersMessages(response.data)\r\n        } catch (error) {\r\n         console.log(error)\r\n     }\r\n    }\r\n\r\n    const getClickedUsersMessages = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:8000/messages', {\r\n                params: { userId: clickedUserId , correspondingUserId: userId}\r\n            })\r\n            setClickedUsersMessages(response.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUsersMessages()\r\n        getClickedUsersMessages()\r\n    }, [])\r\n\r\n    const messages = []\r\n\r\n    usersMessages?.forEach(message => {\r\n        const formattedMessage = {}\r\n        formattedMessage['name'] = user?.first_name\r\n        formattedMessage['img'] = user?.url\r\n        formattedMessage['message'] = message.message\r\n        formattedMessage['timestamp'] = message.timestamp\r\n        messages.push(formattedMessage)\r\n    })\r\n\r\n    clickedUsersMessages?.forEach(message => {\r\n        const formattedMessage = {}\r\n        formattedMessage['name'] = clickedUser?.first_name\r\n        formattedMessage['img'] = clickedUser?.url\r\n        formattedMessage['message'] = message.message\r\n        formattedMessage['timestamp'] = message.timestamp\r\n        messages.push(formattedMessage)\r\n    })\r\n\r\n    const descendingOrderMessages = messages?.sort((a,b) => a.timestamp.localeCompare(b.timestamp))\r\n\r\n    return (\r\n        <>\r\n        <Chat descendingOrderMessages={descendingOrderMessages}/>\r\n     <ChatInput\r\n         user={user}\r\n         clickedUser={clickedUser} getUserMessages={getUsersMessages} getClickedUsersMessages={getClickedUsersMessages}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatDisplay","C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\Chat.js",[],[],"C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\ChatInput.js",[],[],"C:\\Users\\rohit\\OneDrive\\Desktop\\Sparkmate\\client\\src\\components\\ImageUpload.js",[],[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":9,"column":21,"nodeType":"110","messageId":"111","endLine":9,"endColumn":30},{"ruleId":"108","severity":1,"message":"112","line":9,"column":32,"nodeType":"110","messageId":"111","endLine":9,"endColumn":44},{"ruleId":"108","severity":1,"message":"113","line":6,"column":8,"nodeType":"110","messageId":"111","endLine":6,"endColumn":19},{"ruleId":"108","severity":1,"message":"109","line":9,"column":21,"nodeType":"110","messageId":"111","endLine":9,"endColumn":30},{"ruleId":"108","severity":1,"message":"112","line":9,"column":32,"nodeType":"110","messageId":"111","endLine":9,"endColumn":44},{"ruleId":"108","severity":1,"message":"109","line":9,"column":21,"nodeType":"110","messageId":"111","endLine":9,"endColumn":30},{"ruleId":"108","severity":1,"message":"114","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":18},{"ruleId":"108","severity":1,"message":"115","line":2,"column":10,"nodeType":"110","messageId":"111","endLine":2,"endColumn":19},{"ruleId":"108","severity":1,"message":"116","line":2,"column":21,"nodeType":"110","messageId":"111","endLine":2,"endColumn":29},{"ruleId":"108","severity":1,"message":"117","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":21},{"ruleId":"108","severity":1,"message":"118","line":4,"column":10,"nodeType":"110","messageId":"111","endLine":4,"endColumn":20},{"ruleId":"108","severity":1,"message":"119","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":13},{"ruleId":"108","severity":1,"message":"120","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":17},{"ruleId":"108","severity":1,"message":"121","line":2,"column":8,"nodeType":"110","messageId":"111","endLine":2,"endColumn":17},{"ruleId":"108","severity":1,"message":"122","line":14,"column":13,"nodeType":"110","messageId":"111","endLine":14,"endColumn":20},{"ruleId":"108","severity":1,"message":"112","line":14,"column":33,"nodeType":"110","messageId":"111","endLine":14,"endColumn":45},{"ruleId":"123","severity":1,"message":"124","line":99,"column":17,"nodeType":"125","endLine":99,"endColumn":60},{"ruleId":"123","severity":1,"message":"124","line":100,"column":17,"nodeType":"125","endLine":100,"endColumn":56},{"ruleId":"108","severity":1,"message":"109","line":4,"column":22,"nodeType":"110","messageId":"111","endLine":4,"endColumn":31},{"ruleId":"108","severity":1,"message":"109","line":7,"column":19,"nodeType":"110","messageId":"111","endLine":7,"endColumn":28},{"ruleId":"108","severity":1,"message":"112","line":7,"column":30,"nodeType":"110","messageId":"111","endLine":7,"endColumn":42},{"ruleId":"126","severity":1,"message":"127","line":25,"column":6,"nodeType":"128","endLine":25,"endColumn":15,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":29,"column":66,"nodeType":"132","messageId":"133","endLine":29,"endColumn":68},{"ruleId":"126","severity":1,"message":"134","line":38,"column":8,"nodeType":"128","endLine":38,"endColumn":10,"suggestions":"135"},"no-new-object",["136"],"no-unused-vars","'setCookie' is assigned a value but never used.","Identifier","unusedVar","'removeCookie' is assigned a value but never used.","'ImageUpload' is defined but never used.","'TinderCard' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'ChatContainer' is defined but never used.","'useCookies' is defined but never used.","'axios' is defined but never used.","'whiteLogo' is defined but never used.","'colorLogo' is defined but never used.","'cookies' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMatches'. Either include it or remove the dependency array.","ArrayExpression",["137"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'getClickedUsersMessages' and 'getUsersMessages'. Either include them or remove the dependency array.",["138"],"no-object-constructor",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [getMatches, matches]",{"range":"143","text":"144"},"Update the dependencies array to be: [getClickedUsersMessages, getUsersMessages]",{"range":"145","text":"146"},[757,766],"[getMatches, matches]",[1227,1229],"[getClickedUsersMessages, getUsersMessages]"]